Integrating the PhonePe payment gateway into a MERN stack application can help you facilitate payments easily. Here's a step-by-step guide to doing just that.

==>Step 1: Set Up Your Backend

1. Create the Express Server:
   If you haven't already set up your Express server, create a new directory for your project and initialize it:

   --------------------------------------------------
   mkdir mern-phonepe-integration
   cd mern-phonepe-integration
   npm init -y
   npm install express mongoose cors dotenv body-parser axios
   --------------------------------------------------

   Create an `index.js` file and set up Express:

   --------------------------------------------------javascript
   // index.js
   const express = require("express");
   const mongoose = require("mongoose");
   const cors = require("cors");
   const bodyParser = require("body-parser");
   require("dotenv").config();

   const app = express();
   app.use(cors());
   app.use(bodyParser.json());

   const PORT = process.env.PORT || 5000;

   mongoose.connect(process.env.MONGODB_URI, {
       useNewUrlParser: true,
       useUnifiedTopology: true,
   })
   .then(() => console.log("MongoDB connected"))
   .catch(err => console.log(err));

   app.listen(PORT, () => {
       console.log(`Server is running on port ${PORT}`);
   });
   --------------------------------------------------

2. Create Payment Routes:
   Create a new folder called `routes`, and inside that folder, create a file called `payment.js`:

   --------------------------------------------------
   mkdir routes
   touch routes/payment.js
   --------------------------------------------------

   Open `payment.js` and configure it for creating payment requests and verifying payments:

   --------------------------------------------------javascript
   // routes/payment.js
   const express = require("express");
   const axios = require("axios");
   const router = express.Router();

   // Generate a payment request
   router.post("/create-order", async (req, res) => {
       const { amount, transactionId } = req.body; // Get amount and transaction ID from the request

       const requestBody = {
           "amount": amount, // The amount in paisa
           "currency": "INR",
           "transactionId": transactionId,
           "merchantId": process.env.PHONEPE_MERCHANT_ID,
           // Add other required fields according to PhonePe's documentation
       };

       try {
           // Make a request to PhonePe
           const response = await axios.post('https://api.phonepe.com/apis/hermes/pg/create/payment', requestBody, {
               headers: {
                   'Content-Type': 'application/json',
                   // Include other headers as needed
                   'X-VERIFY': process.env.PHONEPE_SECRET_KEY // Add your secret key for verification
               },
           });
           res.json(response.data);
       } catch (error) {
           res.status(500).send({ error: "Payment initiation failed." });
       }
   });

   module.exports = router;
   --------------------------------------------------

3. Use the Payment Route:
   Import and use the payment route in your `index.js`:

   --------------------------------------------------javascript
   const paymentRoutes = require("./routes/payment");
   app.use("/api/payment", paymentRoutes);
   --------------------------------------------------

==>Step 2: Frontend Setup with React

1. Create the React App:
   In the parent directory, create your React app:

   --------------------------------------------------
   npx create-react-app client
   cd client
   --------------------------------------------------

2. Create Payment Component:
   Create a component named `Payment.js` inside the `src` folder:

   --------------------------------------------------javascript
   // src/Payment.js
   import React, { useState } from "react";

   const Payment = () => {
       const [amount, setAmount] = useState("");
       const [responseMessage, setResponseMessage] = useState("");

       const handlePayment = async () => {
           const transactionId = `txn_${new Date().getTime()}`; // Generate a unique transaction ID
           const response = await fetch("http://localhost:5000/api/payment/create-order", {
               method: "POST",
               headers: {
                   "Content-Type": "application/json",
               },
               body: JSON.stringify({ amount: amount * 100, transactionId }),
           });

           const data = await response.json();
           setResponseMessage(data.message || data.error);
           // Handle success or failure in a user-friendly manner
           if (data.status === "SUCCESS") {
               alert("Payment successful!");
           } else {
               alert("Payment failed: " + data.error);
           }
       };

       return (
           <div>
               <h2>PhonePe Payment</h2>
               <input
                   type="number"
                   placeholder="Enter Amount"
                   value={amount}
                   onChange={(e) => setAmount(e.target.value)}
               />
               <button onClick={handlePayment}>Pay</button>
               <p>{responseMessage}</p>
           </div>
       );
   };

   export default Payment;
   --------------------------------------------------

3. Use the Payment Component:
   Add the `Payment` component in your `src/App.js`:

   --------------------------------------------------javascript
   // src/App.js
   import React from "react";
   import Payment from "./Payment";

   function App() {
       return (
           <div>
               <h1>MERN PhonePe Integration</h1>
               <Payment />
           </div>
       );
   }

   export default App;
   --------------------------------------------------

==>Step 3: Environment Variables

Create a `.env` file in your backend directory with the following content:

--------------------------------------------------plaintext
MONGODB_URI=your_mongodb_uri
PHONEPE_MERCHANT_ID=your_phonepe_merchant_id
PHONEPE_SECRET_KEY=your_phonepe_secret_key
--------------------------------------------------

Replace `your_mongodb_uri`, `your_phonepe_merchant_id`, and `your_phonepe_secret_key` with your actual MongoDB and PhonePe credentials.

==>Step 4: Final Steps

1. Start the Backend Server:
   Open a terminal window, navigate to your backend directory, and start the server:

   --------------------------------------------------
   node index.js
   --------------------------------------------------

2. Start the React App:
   Open another terminal window, navigate to your client directory, and start the React app:

   --------------------------------------------------
   npm start
   --------------------------------------------------

==>Summary

You should now have a basic payment integration working with PhonePe in your MERN stack application. This example covers the basics for initiating a payment. However, you will need to handle various aspects such as payment verification, transaction status, and additional features according to your application's requirements.

Additionally, make sure to use test credentials during development and handling errors properly in your production application. Always refer to the official [PhonePe API documentation](https://developer.phonepe.com/docs) for more detailed configurations and best practices.
