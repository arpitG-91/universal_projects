Integrating the Razorpay payment gateway into a MERN stack application involves several steps, including setting up your backend with Express, configuring Razorpayâ€™s SDK, and creating the necessary components in your React frontend. Below is a detailed guide to help you through the integration process.

==>Step 1: Set Up Your Backend

1. Create the Express Server:
   If you haven't already set up your Express server, create a new directory for your project and initialize it:

   -------------------------------------------------
   mkdir mern-razorpay-integration
   cd mern-razorpay-integration
   npm init -y
   npm install express mongoose cors dotenv body-parser razorpay
   -------------------------------------------------

   Create an `index.js` file and set up your Express server:

   -------------------------------------------------javascript
   // index.js
   const express = require("express");
   const mongoose = require("mongoose");
   const cors = require("cors");
   const bodyParser = require("body-parser");
   require("dotenv").config();

   const app = express();
   app.use(cors());
   app.use(bodyParser.json());

   const PORT = process.env.PORT || 5000;

   mongoose.connect(process.env.MONGODB_URI, {
       useNewUrlParser: true,
       useUnifiedTopology: true,
   })
   .then(() => console.log("MongoDB connected"))
   .catch(err => console.log(err));

   app.listen(PORT, () => {
       console.log(`Server is running on port ${PORT}`);
   });
   -------------------------------------------------

2. Create Payment Route:
   Create a route to handle payment requests. Add a new folder named `routes` and create a file `payment.js` inside it:

   -------------------------------------------------
   mkdir routes
   touch routes/payment.js
   -------------------------------------------------

   Then open `payment.js` and set it up like this:

   -------------------------------------------------javascript
   // routes/payment.js
   const express = require("express");
   const razorpay = require("razorpay");
   const router = express.Router();

   const razorpayInstance = new razorpay({
       key_id: process.env.RAZORPAY_KEY_ID,
       key_secret: process.env.RAZORPAY_KEY_SECRET,
   });

   router.post("/create-order", async (req, res) => {
       const options = {
           amount: req.body.amount, // amount in the smallest currency unit
           currency: "INR",
           receipt: "receipt#1",
       };

       try {
           const order = await razorpayInstance.orders.create(options);
           res.json(order);
       } catch (error) {
           res.status(500).send({ error: error.message });
       }
   });

   module.exports = router;
   -------------------------------------------------

3. Use the Payment Route:
   Import and use the payment route in your `index.js` file:

   -------------------------------------------------javascript
   const paymentRoutes = require("./routes/payment");
   app.use("/api/payment", paymentRoutes);
   -------------------------------------------------

==>Step 2: Frontend Setup with React

1. Create the React App:
   In the same parent directory as your server, create the React app:

   -------------------------------------------------
   npx create-react-app client
   cd client
   -------------------------------------------------

2. Create Payment Component:
   Create a component named `Payment.js` inside the `src` folder:

   -------------------------------------------------javascript
   // src/Payment.js
   import React, { useState } from "react";

   const Payment = () => {
       const [amount, setAmount] = useState("");

       const handlePayment = async () => {
           const response = await fetch("http://localhost:5000/api/payment/create-order", {
               method: "POST",
               headers: {
                   "Content-Type": "application/json",
               },
               body: JSON.stringify({ amount: amount * 100 }), // Convert to smallest currency unit (paisa)
           });

           const orderData = await response.json();

           const options = {
               key: process.env.REACT_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Razorpay Dashboard
               amount: orderData.amount,
               currency: orderData.currency,
               name: "Your Company Name",
               description: "Test Transaction",
               order_id: orderData.id,
               handler: function (response) {
                   alert(`Payment successful: ${response.razorpay_payment_id}`);
                   console.log(response);
               },
               prefill: {
                   name: "Your Name",
                   email: "youremail@example.com",
                   contact: "9999999999",
               },
               theme: {
                   color: "#3399cc",
               },
           };

           const razorpay = new window.Razorpay(options);
           razorpay.open();
       };

       return (
           <div>
               <h2>Payment</h2>
               <input
                   type="number"
                   placeholder="Enter Amount"
                   value={amount}
                   onChange={(e) => setAmount(e.target.value)}
               />
               <button onClick={handlePayment}>Pay</button>
           </div>
       );
   };

   export default Payment;
   -------------------------------------------------

3. Include the Razorpay Script:
   Modify the `src/index.html` to include the Razorpay script:

   -------------------------------------------------html
   <!-- In public/index.html -->
   <script src="https://checkout.razorpay.com/v1/checkout.js" />
   -------------------------------------------------

4. Use the Payment Component:
   Add the `Payment` component in your `src/App.js`:

   -------------------------------------------------javascript
   // src/App.js
   import React from "react";
   import Payment from "./Payment";

   function App() {
       return (
           <div>
               <h1>MERN Razorpay Integration</h1>
               <Payment />
           </div>
       );
   }

   export default App;
   -------------------------------------------------

==>Step 3: Environment Variables

Make sure to create a `.env` file in your backend directory with the following variables:

-------------------------------------------------
MONGODB_URI=your_mongodb_uri
RAZORPAY_KEY_ID=your_razorpay_key_id
RAZORPAY_KEY_SECRET=your_razorpay_key_secret
-------------------------------------------------

Replace `your_mongodb_uri`, `your_razorpay_key_id`, and `your_razorpay_key_secret` with your actual MongoDB and Razorpay credentials.

==>Step 4: Final Steps

1. Start the Backend Server:
   Open a terminal window, navigate to your backend directory, and start the server:

   -------------------------------------------------
   node index.js
   -------------------------------------------------

2. Start the React App:
   Open another terminal window, navigate to your client directory, and start the React app:

   -------------------------------------------------
   npm start
   -------------------------------------------------

==>Summary

You should now have a basic payment integration working with Razorpay in your MERN stack application. This example is basic and can be further expanded with features like order tracking, handling webhooks, and improved user experience.

Make sure to use the Razorpay test credentials and test thoroughly before going live. Additionally, handle all potential errors (such as user cancellation or payment failures) in your production application as needed.